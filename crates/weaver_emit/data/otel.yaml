groups:
  - id: registry.telemetry
    type: attribute_group
    display_name: Telemetry Attributes
    brief: >
      This document defines attributes for telemetry SDK.
    attributes:
      - id: telemetry.sdk.name
        type: string
        stability: stable
        brief: >
          The name of the telemetry SDK as defined above.
        note: |
          The OpenTelemetry SDK MUST set the `telemetry.sdk.name` attribute to `opentelemetry`.
          If another SDK, like a fork or a vendor-provided implementation, is used, this SDK MUST set the
          `telemetry.sdk.name` attribute to the fully-qualified class or module name of this SDK's main entry point
          or another suitable identifier depending on the language.
          The identifier `opentelemetry` is reserved and MUST NOT be used in this case.
          All custom identifiers SHOULD be stable across different versions of an implementation.
        examples: ["opentelemetry"]
      - id: telemetry.sdk.language
        type:
          members:
            - id: cpp
              value: "cpp"
              stability: stable
            - id: dotnet
              value: "dotnet"
              stability: stable
            - id: erlang
              value: "erlang"
              stability: stable
            - id: go
              value: "go"
              stability: stable
            - id: java
              value: "java"
              stability: stable
            - id: nodejs
              value: "nodejs"
              stability: stable
            - id: php
              value: "php"
              stability: stable
            - id: python
              value: "python"
              stability: stable
            - id: ruby
              value: "ruby"
              stability: stable
            - id: rust
              value: "rust"
              stability: stable
            - id: swift
              value: "swift"
              stability: stable
            - id: webjs
              value: "webjs"
              stability: stable
        stability: stable
        brief: >
          The language of the telemetry SDK.
      - id: telemetry.sdk.version
        type: string
        stability: stable
        brief: >
          The version string of the telemetry SDK.
        examples: ["1.2.3"]
      - id: telemetry.distro.name
        type: string
        stability: development
        brief: >
          The name of the auto instrumentation agent or distribution, if used.
        note: |
          Official auto instrumentation agents and distributions SHOULD set the `telemetry.distro.name` attribute to
          a string starting with `opentelemetry-`, e.g. `opentelemetry-java-instrumentation`.
        examples: ["parts-unlimited-java"]
      - id: telemetry.distro.version
        type: string
        stability: development
        brief: >
          The version string of the auto instrumentation agent or distribution, if used.
        examples: ["1.2.3"]

  - id: registry.service
    type: attribute_group
    display_name: Service Attributes
    brief: >
      A service instance.
    attributes:
      - id: service.name
        type: string
        brief: >
          Logical name of the service.
        note: >
          MUST be the same for all instances of horizontally scaled services.
          If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated
          with [`process.executable.name`](process.md), e.g. `unknown_service:bash`.
          If `process.executable.name` is not available, the value MUST be set to `unknown_service`.
        examples: ["shoppingcart"]
        stability: stable
      - id: service.version
        type: string
        brief: >
          The version string of the service API or implementation. The format is not defined by these conventions.
        examples: ["2.0.0", "a01dbef8a"]
        stability: stable
      - id: service.namespace
        type: string
        stability: development
        brief: >
          A namespace for `service.name`.
        note: >
          A string value having a meaning that helps to distinguish a group of services,
          for example the team name that owns a group of services.
          `service.name` is expected to be unique within the same namespace.
          If `service.namespace` is not specified in the Resource then `service.name`
          is expected to be unique for all services that have no explicit namespace defined
          (so the empty/unspecified namespace is simply one more valid namespace).
          Zero-length namespace string is assumed equal to unspecified namespace.
        examples: ["Shop"]
      - id: service.instance.id
        type: string
        stability: development
        brief: >
          The string ID of the service instance.
        note: |
          MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words
          `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to
          distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled
          service).

          Implementations, such as SDKs, are recommended to generate a random Version 1 or Version 4 [RFC
          4122](https://www.ietf.org/rfc/rfc4122.txt) UUID, but are free to use an inherent unique ID as the source of
          this value if stability is desirable. In that case, the ID SHOULD be used as source of a UUID Version 5 and
          SHOULD use the following UUID as the namespace: `4d63009a-8d0f-11ee-aad7-4c796ed8e320`.

          UUIDs are typically recommended, as only an opaque value for the purposes of identifying a service instance is
          needed. Similar to what can be seen in the man page for the
          [`/etc/machine-id`](https://www.freedesktop.org/software/systemd/man/latest/machine-id.html) file, the underlying
          data, such as pod name and namespace should be treated as confidential, being the user's choice to expose it
          or not via another resource attribute.

          For applications running behind an application server (like unicorn), we do not recommend using one identifier
          for all processes participating in the application. Instead, it's recommended each division (e.g. a worker
          thread in unicorn) to have its own instance.id.

          It's not recommended for a Collector to set `service.instance.id` if it can't unambiguously determine the
          service instance that is generating that telemetry. For instance, creating an UUID based on `pod.name` will
          likely be wrong, as the Collector might not know from which container within that pod the telemetry originated.
          However, Collectors can set the `service.instance.id` if they can unambiguously determine the service instance
          for that telemetry. This is typically the case for scraping receivers, as they know the target address and
          port.
        examples: ["627cc493-f310-47de-96bd-71410b7dec09"]

  - id: registry.otel.weaver
    type: attribute_group
    display_name: Weaver Attributes
    brief: >
      Weaver Emit attributes.
    attributes:
      - id: otel.weaver.registry_path
        type: string
        brief: >
          The path to the registry that is being emitted by weaver.
        examples: ["crates/weaver_emit/data"]
        stability: development
